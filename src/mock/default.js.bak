import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import { LoginUsers, Users } from './data/user';
import { Groups, Hosts, Services } from './data/group';
let _Users = Users;
let _Hosts = Hosts;
let _Services = Services;

export default {
  /**
   * mock bootstrap
   */
  bootstrap() {
    let mock = new MockAdapter(axios);

    // mock success request
    mock.onGet('/success').reply(200, {msg : 'success'});

    // mock error request
    mock.onGet('/error').reply(500, {msg : 'failure'});

    //登录
    mock.onPost('/login').reply(config => {
      let {username, password} = JSON.parse(config.data);
      // console log for debug
      console.log("msg username:%s", username);
      console.log("msg password:%s", password);
      return new Promise((resolve, reject) => {
        let user = null;
        setTimeout(() => {
          let hasUser = LoginUsers.some(u => {
            if (u.username === username && u.password === password) {
              user = JSON.parse(JSON.stringify(u));
              user.password = undefined;
              return true;
            }
          });

          if (hasUser) {
            resolve([ 200, {code : 200, msg : '请求成功', user} ]);
          } else {
            resolve([ 200, {code : 500, msg : '账号或密码错误'} ]);
          }
        }, 1000);
      });
    });

    //获取用户列表
    mock.onGet('/archapi/user/list').reply(config => {
      let {name} = config.params;
      let mockUsers = _Users.filter(user => {
        if (name && user.name.indexOf(name) == -1)
          return false;
        return true;
      });
      return new Promise((resolve, reject) => {
        setTimeout(() => { resolve([ 200, {users : mockUsers} ]); }, 1000);
      });
    });
    //获取分组列表
    mock.onGet('/zymanager/groups').reply(config => {
      let {group_name} = config.params;
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([200, {
            groups: Groups
          }]);
        }, 1000);
      });
    });
    //获取分组机器列表
    mock.onGet('/zymanager/group/hosts').reply(config => {
      let {host_ip} = config.params;
      let mockHosts = _Hosts.filter(host => {
        if (host_ip && host.host_ip.indexOf(host_ip) == -1) return false;
        return true;
      })
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([200, {
            hosts: mockHosts
          }]);
        }, 1000);
      });
    });
    //获取分组机器列表
    mock.onGet('/zymanager/group/host/services').reply(config => {
      let {project} = config.params.project;
      let {service} = config.params.service;
      let mockServices = _Services.filter(service => {
        if (project && service.project.indexOf(project) == -1) return false;
        return true;
      })
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([200, {
            services: mockServices
          }]);
        }, 1000);
      });
    });

    //获取用户列表（分页）
    mock.onGet('/archapi/user/list/page').reply(config => {
      let {page, name} = config.params;
      console.log("mock page:%s", page);
      console.log("mock name:%s", name);
      let mockUsers = _Users.filter(user => {
        if (name && user.name.indexOf(name) == -1)
          return false;
        return true;
      });
      let total = mockUsers.length;
      mockUsers = mockUsers.filter((u, index) => index < 20 * page &&
                                                 index >= 20 * (page - 1));
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([ 200, {total : total, users : mockUsers} ]);
        }, 1000);
      });
    });

    //删除用户
    mock.onDelete('/archapi/user/delete').reply(config => {
      let {id} = config.params;
      _Users = _Users.filter(u => u.id !== id);
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([ 200, {code : 200, msg : '删除成功'} ]);
        }, 500);
      });
    });

    //批量删除用户
    mock.onDelete('/archapi/user/batch/delete').reply(config => {
      let {ids} = config.params;
      ids = ids.split(',');
      _Users = _Users.filter(u => !ids.includes(u.id));
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([ 200, {code : 200, msg : '删除成功'} ]);
        }, 500);
      });
    });

    //编辑用户
    mock.onPost('/archapi/user/update').reply(config => {
      let {id, name, addr, age, birth, sex} = config.params;
      _Users.some(u => {
        if (u.id === id) {
          u.name = name;
          u.addr = addr;
          u.age = age;
          u.birth = birth;
          u.sex = sex;
          return true;
        }
      });
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([ 200, {code : 200, msg : '编辑成功'} ]);
        }, 500);
      });
    });

    //新增用户
    mock.onPost('/archapi/user/create').reply(config => {
      let {name, addr, age, birth, sex} = config.params;
      _Users.push(
          {name : name, addr : addr, age : age, birth : birth, sex : sex});
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve([ 200, {code : 200, msg : '新增成功'} ]);
        }, 500);
      });
    });
  }
};
